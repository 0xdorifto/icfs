type Attribute = record { trait_type : text; value : text };
type CollectionInfo = record {
  owner : text;
  name : text;
  description : text;
  collection_size : nat64;
  chain_name : text;
  standard : text;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  status_code : nat16;
};
type Metadata = record {
  name : text;
  description : text;
  attributes : vec Attribute;
  image : text;
};
type Result = variant { Ok : nat64; Err : text };
type Result_1 = variant { Ok; Err : text };
service : (CollectionInfo) -> {
  create_metadata : (Metadata) -> (Result);
  get_all_collection_info : () -> (CollectionInfo) query;
  get_all_metadata : () -> (vec record { nat64; opt Metadata }) query;
  get_chain_name : () -> (text) query;
  get_collection_size : () -> (nat64) query;
  get_description : () -> (text) query;
  get_image : (nat64) -> (opt blob) query;
  get_metadata : (nat64) -> (opt Metadata) query;
  get_name : () -> (text) query;
  get_owner : () -> (text) query;
  get_standard : () -> (text) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  set_all_collection_info : (CollectionInfo) -> (Result_1);
  set_chain_name : (text) -> (Result_1);
  set_collection_size : (nat64) -> (Result_1);
  set_description : (text) -> (Result_1);
  set_name : (text) -> (Result_1);
  set_owner : (text) -> (Result_1);
  set_standard : (text) -> (Result_1);
  store_image : (blob) -> (Result);
  update_metadata : (nat64, Metadata) -> (Result_1);
}
